{"version":3,"file":"static/js/3676.f34b0f9c.chunk.js","mappings":"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","sources":["components/ParticipantKda.js","components/MatchSummonerBuild.js","components/ParticipantItem.jsx","components/ParticipantItems.js","components/TeamParticipants.js","views/summoner/Match.js","views/summoner/Summoner.js","../node_modules/@coreui/icons/src/free/cil-lock-locked.ts","../node_modules/@coreui/utils/src/getStyle.ts"],"sourcesContent":["import React from 'react'\nimport { CRow } from '@coreui/react'\nimport PropTypes from 'prop-types'\nimport TeamParticipants from './TeamParticipants'\n\nfunction fillStringWithSpaces(toFormat, desiredLength) {\n  let amountToFill = (desiredLength - toFormat.length) / 2\n  let halfFormatted = toFormat.padStart(toFormat.length + amountToFill, ' ')\n\n  if (desiredLength % 2 !== 0) {\n    halfFormatted = toFormat.padStart(toFormat.length + amountToFill + 1, ' ')\n  }\n\n  const formattedKda = halfFormatted.padEnd(desiredLength, ' ')\n  console.log(formattedKda + ' length: ' + formattedKda.length)\n  return formattedKda\n}\n\nfunction ParticipantKda(props) {\n  const kda =\n    props.participant.deaths === 0\n      ? 'Perfect KDA'\n      : `${(\n          (props.participant.kills + props.participant.assists) /\n          props.participant.deaths\n        ).toFixed(2)} KDA`\n\n  // Calculate the desired length based on \"Perfect KDA\"\n  const desiredLength = 'Perfect KDA'.length\n\n  // Use padStart to add spaces to the beginning of kda string to achieve desired length\n  const formattedKda = fillStringWithSpaces(kda, desiredLength)\n  if (props.summonerNameFromMatchDetail)\n    return (\n      <CRow className=\"justify-content-left\">\n        <CRow className=\"p-0 justify-content-center\">\n          <TeamParticipants participant={props.participant} />\n        </CRow>\n\n        <CRow className=\"p-0 justify-content-center\">\n          {props.participant.kills}/{props.participant.deaths}/{props.participant.assists}\n        </CRow>\n        <CRow className=\"p-0 justify-content-center\">{formattedKda}</CRow>\n      </CRow>\n    )\n  else\n    return (\n      <CRow className=\"justify-content-left\">\n        <CRow className=\"p-0 justify-content-center\">\n          {props.participant.kills}/{props.participant.deaths}/{props.participant.assists}\n        </CRow>\n        <CRow className=\"p-0 justify-content-center\">{formattedKda}</CRow>\n      </CRow>\n    )\n}\n\nParticipantKda.propTypes = {\n  participant: PropTypes.shape({\n    kills: PropTypes.number.isRequired,\n    deaths: PropTypes.number.isRequired,\n    assists: PropTypes.number.isRequired,\n  }).isRequired,\n  summonerNameFromMatchDetail: PropTypes.string,\n}\n\nexport default ParticipantKda\n","// MatchSummonerBuild.js\nimport React from 'react'\nimport { CCol, CRow } from '@coreui/react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport ParticipantKda from './ParticipantKda'\n\nconst MatchSummonerBuild = (props) => {\n  if (props.singleMatch) {\n    return (\n      <CCol sm=\"auto\">\n        <CRow>\n          <CCol className=\"p-0\" sm=\"auto\">\n            <Link\n              to={`/champion/?champ=${\n                props.participant.championName === 'FiddleSticks'\n                  ? 'Fiddlesticks'\n                  : props.participant.championName\n              }`}\n              state={{ itemName: props.participant.championId }}\n            >\n              <img\n                style={{ height: '90px', width: '90px' }}\n                className=\"p-0\"\n                src={`https://ddragon.leagueoflegends.com/cdn/14.21.1/img/champion/${\n                  props.participant.championName === 'FiddleSticks'\n                    ? 'Fiddlesticks'\n                    : props.participant.championName\n                }.png`}\n                alt={props.participant.championId}\n              />\n            </Link>\n          </CCol>\n          <CCol sm=\"auto\">\n            <Link\n              to={`/matchDetail/?${props.gameId}#participant${props.index}`}\n              state={{\n                match: props.match,\n                number: props.index,\n              }}\n              className=\"text-decoration-none text-black\"\n            >\n              <CRow>\n                <img\n                  style={{ height: '45px', width: '45px' }}\n                  className=\"p-0\"\n                  src={`https://ddragon.leagueoflegends.com/cdn/14.21.1/img/spell/${props.participant.summonerSpell1}.png`}\n                  alt={props.participant.summonerSpell1}\n                />\n              </CRow>\n              <CRow>\n                <img\n                  style={{ height: '45px', width: '45px' }}\n                  className=\"p-0\"\n                  src={`https://ddragon.leagueoflegends.com/cdn/14.21.1/img/spell/${props.participant.summonerSpell2}.png`}\n                  alt={props.participant.summonerSpell2}\n                />\n              </CRow>\n            </Link>\n          </CCol>\n        </CRow>\n        <ParticipantKda participant={props.participant} />\n      </CCol>\n    )\n  } else {\n    return (\n      <>\n        <CCol sm=\"auto\">\n          <CRow>\n            <CCol className=\"px-2\">\n              <Link\n                to={`/champion/?champ=${\n                  props.participant.championName === 'FiddleSticks'\n                    ? 'Fiddlesticks'\n                    : props.participant.championName\n                }`}\n                state={{ itemName: props.participant.championId }}\n              >\n                <img\n                  style={{ height: '90px', width: '90px' }}\n                  src={`https://ddragon.leagueoflegends.com/cdn/14.21.1/img/champion/${\n                    props.participant.championName === 'FiddleSticks'\n                      ? 'Fiddlesticks'\n                      : props.participant.championName\n                  }.png`}\n                  alt={props.participant.championId}\n                />\n              </Link>\n            </CCol>\n            <CCol style={{ height: '45px', width: '45px' }} className=\"p-0\">\n              <CRow>\n                <img\n                  style={{ height: '45px', width: '45px' }}\n                  className=\"p-0\"\n                  src={`https://ddragon.leagueoflegends.com/cdn/14.21.1/img/spell/${props.participant.summonerSpell1}.png`}\n                  alt={props.participant.summonerSpell1}\n                />\n              </CRow>\n              <CRow>\n                <img\n                  style={{ height: '45px', width: '45px' }}\n                  className=\"p-0\"\n                  src={`https://ddragon.leagueoflegends.com/cdn/14.21.1/img/spell/${props.participant.summonerSpell2}.png`}\n                  alt={props.participant.summonerSpell2}\n                />\n              </CRow>\n            </CCol>\n            <CCol style={{ width: '115px', padding: 0 }}>\n              <ParticipantKda\n                participant={props.participant}\n                summonerNameFromMatchDetail={\n                  props.participant.riotIdName + '#' + props.participant.riotIdTagline\n                }\n                /***{props.participant.riotIdName + '#' + props.participant.riotIdTagline}***/\n              />\n            </CCol>\n          </CRow>\n        </CCol>\n      </>\n    )\n  }\n}\n\nMatchSummonerBuild.propTypes = {\n  participant: PropTypes.object.isRequired,\n  gameId: PropTypes.any.isRequired,\n  index: PropTypes.any.isRequired,\n  match: PropTypes.any.isRequired,\n  singleMatch: PropTypes.bool.isRequired,\n}\n\nexport default MatchSummonerBuild\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked } from '@coreui/icons'\nimport { CListGroupItem } from '@coreui/react'\n\nconst ParticipantItem = ({ item, color }) => {\n  const shouldRenderImage = item !== 0\n  return shouldRenderImage ? (\n    <CListGroupItem color={color} className=\"p-0\">\n      <img\n        style={{ height: '35px' }}\n        className=\"m-1\"\n        src={`https://ddragon.leagueoflegends.com/cdn/14.21.1/img/item/${item}.png`}\n        alt={item}\n      />\n    </CListGroupItem>\n  ) : (\n    <CListGroupItem color={color} className=\"p-0\">\n      <CIcon\n        style={{ height: '35px', width: '35px' }}\n        className=\"m-1\"\n        size=\"lg\"\n        icon={cilLockLocked}\n      />\n    </CListGroupItem>\n  )\n}\n\nParticipantItem.propTypes = {\n  item: PropTypes.number, // Assuming item is a string representing the item identifier\n  color: PropTypes.string,\n}\n\nexport default ParticipantItem\n","// ParticipantItems.js\nimport React from 'react'\nimport { CCol, CListGroup } from '@coreui/react'\nimport { Link } from 'react-router-dom'\nimport ParticipantItem from './ParticipantItem'\nimport PropTypes from 'prop-types'\n\nfunction ParticipantItems(props) {\n  function getCListGroup() {\n    return (\n      <CListGroup>\n        <CListGroup layout=\"horizontal\">\n          <ParticipantItem item={props.participant.item0} color={props.color} />\n          <ParticipantItem item={props.participant.item1} color={props.color} />\n          <ParticipantItem item={props.participant.item2} color={props.color} />\n          <ParticipantItem item={props.participant.item6} color={props.color} />\n        </CListGroup>\n        <CListGroup layout=\"horizontal\">\n          <ParticipantItem item={props.participant.item3} color={props.color} />\n          <ParticipantItem item={props.participant.item4} color={props.color} />\n          <ParticipantItem item={props.participant.item5} color={props.color} />\n        </CListGroup>\n      </CListGroup>\n    )\n  }\n\n  if (props.matchDetail)\n    return (\n      <CCol sm=\"auto\" className=\"mx-3\">\n        {getCListGroup()}\n      </CCol>\n    )\n  else\n    return (\n      <CCol>\n        <Link\n          to={`/matchDetail/?${props.gameId}#participant${props.index}`}\n          state={{ match: props.match, participant: props.participant, number: props.index }}\n          className=\"text-decoration-none text-black\"\n        >\n          {getCListGroup()}\n        </Link>\n      </CCol>\n    )\n}\n\n// Add PropTypes validation for the props\nParticipantItems.propTypes = {\n  gameId: PropTypes.any.isRequired,\n  index: PropTypes.any.isRequired,\n  match: PropTypes.any.isRequired,\n  participant: PropTypes.any.isRequired,\n  color: PropTypes.string.isRequired,\n  matchDetail: PropTypes.bool,\n}\nexport default ParticipantItems\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useNavigate } from 'react-router-dom'\n\nconst TeamParticipants = ({ participants, imageSize, participant }) => {\n  const navigate = useNavigate()\n\n  const fetchSummoner = (selectedParticipant) => {\n    // Get the summoner name of the clicked participant\n    const summonerName = selectedParticipant.riotIdName + '#' + selectedParticipant.riotIdTagline\n    const encodedSummoner = encodeURIComponent(summonerName)\n\n    // Make the API call here using the search query\n    fetch(`http://localhost:8080/summoners/EUW1/${encodedSummoner}`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data !== 'Summoner not found') {\n          // If summoner data is fetched successfully, navigate to the summoner page\n          navigate(`/summoner/?summonerName=${encodedSummoner}`, { state: { summoner: data } })\n        } else {\n          // Handle case when summoner is not found\n          console.error('Summoner not found')\n        }\n      })\n      .catch((error) => console.error('Error fetching summoner data:', error))\n  }\n\n  function fillStringWithSpaces(toFormat, desiredLength) {\n    let amountToFill = (desiredLength - toFormat.length) / 2\n    let halfFormatted = toFormat.padStart(toFormat.length + amountToFill, ' ')\n\n    if (desiredLength % 2 !== 0) {\n      halfFormatted = toFormat.padStart(toFormat.length + amountToFill + 1, ' ')\n    }\n\n    const formattedKda = halfFormatted.padEnd(desiredLength, ' ')\n    console.log(formattedKda + ' length: ' + formattedKda.length)\n    return formattedKda\n  }\n\n  if (participants) {\n    return (\n      <>\n        {participants.map((participant, index) => (\n          <div key={index} className=\"d-flex\">\n            <img\n              style={{ height: imageSize, width: imageSize }}\n              className=\"ms-2 p-1\"\n              key={participant.championId}\n              src={`https://ddragon.leagueoflegends.com/cdn/14.21.1/img/champion/${\n                participant.championName === 'FiddleSticks'\n                  ? 'Fiddlesticks'\n                  : participant.championName\n              }.png`}\n              alt={participant.championId}\n            />\n            <span\n              className=\"ms-2\"\n              style={{ cursor: 'pointer', whiteSpace: 'pre', width: '150px' }}\n              onClick={() => fetchSummoner(participant)}\n            >\n              {participant.riotIdName + '#' + participant.riotIdTagline}\n            </span>\n          </div>\n        ))}\n      </>\n    )\n  } else if (participant) {\n    return (\n      <div\n        key={participant.riotIdName + '#' + participant.riotIdTagline}\n        className=\"d-flex align-items-center px-1\"\n      >\n        <span\n          style={{ cursor: 'pointer', whiteSpace: 'pre' }}\n          onClick={() => fetchSummoner(participant)}\n        >\n          {/*riot tag is not shown to avoid overfflow*/}\n          {fillStringWithSpaces(participant.riotIdName, 16)}\n        </span>\n      </div>\n    )\n  } else {\n    return <div>No participant is being given</div> // Return null if both participants and participant are not provided\n  }\n}\n\nTeamParticipants.propTypes = {\n  participants: PropTypes.arrayOf(PropTypes.object),\n  imageSize: PropTypes.number,\n  participant: PropTypes.object,\n}\n\nexport default TeamParticipants\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CCol, CContainer, CListGroupItem, CRow } from '@coreui/react'\nimport { Link } from 'react-router-dom'\nimport TeamParticipants from '../../components/TeamParticipants'\nimport MatchSummonerBuild from '../../components/MatchSummonerBuild'\nimport ParticipantItems from '../../components/ParticipantItems'\n\nconst Match = ({ match, riotIdName, riotIdTagline, summonerWon }) => {\n  const { gameDuration, gameId, gameEndTimestamp, participants, queue, teams } = match\n\n  const color = summonerWon ? 'success' : 'danger'\n\n  // Filter participants into two teams\n  const team1Participants = participants\n    .filter((participant) => participant.team === teams[0].teamId)\n    .sort((a, b) => a.participantId - b.participantId)\n\n  const team2Participants = participants\n    .filter((participant) => participant.team === teams[1].teamId)\n    .sort((a, b) => a.participantId - b.participantId)\n\n  // Function to calculate the time elapsed in hours or days\n  const getTimeElapsed = () => {\n    const currentTime = Date.now()\n    const timeDifference = currentTime - gameEndTimestamp\n    const hoursElapsed = Math.floor(timeDifference / (1000 * 60 * 60))\n    const daysElapsed = Math.floor(timeDifference / (1000 * 60 * 60 * 24))\n    return daysElapsed >= 1 ? `${daysElapsed} days ago` : `${hoursElapsed} hours ago`\n  }\n\n  // Function to convert seconds to minutes and seconds format\n  const formatGameDuration = (durationInSeconds) => {\n    const minutes = Math.floor(durationInSeconds / 60)\n    const seconds = durationInSeconds % 60\n    return `${minutes}m ${seconds}s`\n  }\n\n  return (\n    <CListGroupItem color={color} className=\"p-1\">\n      {console.log(participants)}\n      {participants.map((participant, index) => {\n        // Agregar console.log para depurar los valores\n        //console.log('participant.riotIdName:', participant.riotIdName)\n        //console.log('riotIdName:', riotIdName)\n        //console.log('participant.riotIdTagline:', participant.riotIdTagline)\n        //console.log('riotIdTagline:', riotIdTagline)\n        console.log(participant)\n        if (participant.riotIdName === riotIdName && participant.riotIdTagline === riotIdTagline) {\n          return (\n            <CContainer key={index}>\n              <CRow>\n                <CCol sm=\"auto\">\n                  <Link\n                    state={{ match: match, number: index }}\n                    to={`/matchDetail/?${gameId}#participant${index}`}\n                    key={gameId}\n                    className=\"text-decoration-none text-black\"\n                  >\n                    <CRow className=\"justify-content-around\">\n                      <CRow>\n                        <span style={{ whiteSpace: 'pre' }} className=\"p-0\">\n                          {summonerWon ? 'WIN ' : 'LOSE'}\n                        </span>\n                      </CRow>\n                      <CRow>\n                        <span className=\"px-0\" style={{ width: '200px' }}>\n                          Game Mode:\n                          {queue.replace('TEAM_BUILDER_', '').replace('_SR', '').replace('_', ' ')}\n                        </span>\n                      </CRow>\n                    </CRow>\n                    <CRow className=\"justify-content-around\">\n                      <CRow>{formatGameDuration(match.gameDuration)}</CRow>\n                      <CRow>{getTimeElapsed()}</CRow>\n                    </CRow>\n                  </Link>\n                </CCol>\n                <MatchSummonerBuild\n                  key={participant}\n                  participant={participant}\n                  gameId={gameId}\n                  index={index}\n                  match={match}\n                  singleMatch={true}\n                />\n                <ParticipantItems\n                  key={gameId}\n                  gameId={gameId}\n                  index={index}\n                  match={match}\n                  participant={participant}\n                  color={color}\n                />\n                <CCol className=\"p-0\">\n                  <CContainer>\n                    <CRow className=\"justify-content-start flex-nowrap\">\n                      <CCol>\n                        {/* Display Team 1 Participants using TeamParticipants component */}\n                        <TeamParticipants participants={team1Participants} imageSize={30} />\n                      </CCol>\n                      <CCol>\n                        {/* Display Team 2 Participants using TeamParticipants component */}\n                        <TeamParticipants participants={team2Participants} imageSize={30} />\n                      </CCol>\n                    </CRow>\n                  </CContainer>\n                </CCol>{' '}\n                {/* Display other participant attributes */}\n              </CRow>\n            </CContainer>\n          )\n        }\n        return null\n      })}\n    </CListGroupItem>\n  )\n}\n\nMatch.propTypes = {\n  match: PropTypes.shape({\n    gameDuration: PropTypes.number.isRequired,\n    gameId: PropTypes.number.isRequired,\n    gameEndTimestamp: PropTypes.number.isRequired,\n    participants: PropTypes.arrayOf(PropTypes.object).isRequired,\n    queue: PropTypes.string.isRequired,\n    teams: PropTypes.arrayOf(PropTypes.object).isRequired,\n  }).isRequired,\n  riotIdName: PropTypes.string.isRequired,\n  riotIdTagline: PropTypes.string.isRequired,\n  summonerWon: PropTypes.bool.isRequired,\n}\n\nexport default Match\n","import React, { useEffect, useState } from 'react'\nimport Match from './Match'\nimport { useLocation } from 'react-router-dom'\nimport { CButton, CCol, CContainer, CListGroup, CRow } from '@coreui/react'\nimport { CChart } from '@coreui/react-chartjs'\nimport { getStyle } from '@coreui/utils'\n\nconst Summoner = () => {\n  const [matchList, setMatchList] = useState([])\n  //const temporalSummoner = 'simply me' // Replace with your desired summoner name\n\n  // Access the location object using useLocation()\n  const location = useLocation()\n\n  // Destructure 'summoner' object to get 'name' and 'summonerPlatform'\n  if (location.state == null) window.location.replace('/dashboard')\n\n  // Access the 'summoner' object from the location state\n  const { summoner } = location.state\n  const { name, platform } = summoner\n  const encodedName = encodeURIComponent(name)\n  const handleFetchMatchList = () => {\n    fetch(`http://localhost:8080/match/${platform}/matches/summoner/${encodedName}`)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Failed to fetch data')\n        }\n        return response.json()\n      })\n      .then((data) => {\n        setMatchList(data)\n        console.log('Match list:', data) // Log the data received from the API\n        window.location.reload() // Refresh the page after fetching the data\n      })\n      .catch((error) => console.error('Error fetching match list:', error))\n  }\n\n  useEffect(() => {\n    //fetch(`http://localhost:8080/match/EUW/recentMatch/summoner/${temporalSummoner}`)\n    fetch(`http://localhost:8080/match/EUW/summoner/${encodedName}`)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Failed to fetch data')\n        }\n        return response.json()\n      })\n      .then((data) => {\n        setMatchList(data)\n        console.log('Match list:', data) // Log the data received from the API\n      })\n      .catch((error) => console.error('Error fetching match list:', error))\n  }, [name])\n\n  // Sort the matchList array by gameEndTimestamp in descending order\n  const sortedMatchList = matchList.sort((a, b) => b.gameEndTimestamp - a.gameEndTimestamp)\n\n  // Calculate the number of games won and lost\n  const { wins, loses } = sortedMatchList.reduce(\n    (accumulator, match) => {\n      const firstTeam = match.teams[0]\n      const teamWinner = firstTeam.win === true ? firstTeam.teamId : match.teams[1].teamId\n\n      /*      match.participants.map((participant) => {\n              console.log('participant', participant.riotIdName, participant.riotIdTagline)\n              console.log(participant)\n            })*/\n\n      const summonerTeam = match.participants.find(\n        (participant) => participant.riotIdName + '#' + participant.riotIdTagline === name,\n      )?.team\n\n      if (teamWinner === summonerTeam) {\n        accumulator.wins += 1\n      } else {\n        accumulator.loses += 1\n      }\n\n      return accumulator\n    },\n    { wins: 0, loses: 0 },\n  )\n\n  // Custom plugin to display text inside the doughnut chart\n  const doughnutTextPlugin = {\n    id: 'doughnutTextPlugin',\n    beforeDraw: function (chart) {\n      console.log('doughnutTextPlugin')\n      const width = chart.chartArea.width\n      const height = chart.chartArea.height\n      const ctx = chart.ctx\n\n      ctx.restore()\n      const fontSize = (height / 110).toFixed(2)\n      ctx.font = fontSize + 'em sans-serif'\n      ctx.textBaseline = 'middle'\n\n      const winrate = ((wins * 100) / (wins + loses)).toFixed(1) // Calculate the winrate\n      const text = winrate + '%' // Separate data1 and data2 with horizontal line\n      const textWidth = ctx.measureText(text).width // Calculate the width of the text\n\n      // Calculate the x position to center the text horizontally\n      const textX = (width - textWidth) / 2\n      const textY = height / 2 + chart.legend.height + chart.titleBlock.height\n\n      ctx.fillText(text, textX, textY) // Adjust vertical position\n\n      ctx.save()\n    },\n  }\n\n  // Check if 'summoner' is an object or a string\n  const isSummonerValid = typeof summoner === 'object' || typeof summoner === 'string'\n\n  {\n    if (isSummonerValid) {\n      return (\n        <div>\n          <CContainer fluid className=\"d-flex justify-content-sm-start\">\n            <CCol>\n              <CRow>\n                <CCol sm=\"auto\">\n                  <CRow>\n                    <img\n                      style={{ height: '100px', width: '100px' }}\n                      className=\"ms-2 p-0\"\n                      src={\n                        'https://ddragon.leagueoflegends.com/cdn/14.20.1/img/profileicon/' +\n                        summoner.profileIconId +\n                        '.png'\n                      }\n                      alt={summoner.profileIconId}\n                    />\n                  </CRow>\n                  <CRow className=\"justify-content-center\">LvL {summoner.summonerLevel}</CRow>\n                  <CRow className=\"mb-3\">\n                    {' '}\n                    {/* Add the button that triggers the fetch call and page refresh */}\n                    <CButton color=\"success\" onClick={handleFetchMatchList}>\n                      Update\n                    </CButton>\n                  </CRow>\n                </CCol>\n                <CCol>\n                  <CRow className=\"mx-2\">\n                    <h1 style={{ whiteSpace: 'nowrap' }}>{name}</h1>\n                  </CRow>\n                  <CRow className=\"mx-5\">\n                    {/* Conditionally render the chart only when the sum of wins and losses is greater than 0 */}\n                    {wins + loses > 0 && (\n                      <CContainer sm=\"auto\" className=\"m-0\" style={{ height: '20%', width: '20%' }}>\n                        <CChart\n                          type=\"doughnut\"\n                          data={{\n                            labels: ['Wins', 'Loses'],\n                            datasets: [\n                              {\n                                backgroundColor: ['#41B883', '#DD1B16'],\n                                data: [wins, loses],\n                              },\n                            ],\n                          }}\n                          options={{\n                            responsive: true,\n                            maintainAspectRatio: true,\n                            plugins: {\n                              legend: {\n                                labels: {\n                                  color: getStyle('--cui-body-color'),\n                                },\n                              },\n                            },\n                          }}\n                          plugins={[doughnutTextPlugin]} // Add the plugin here\n                        />\n                      </CContainer>\n                    )}\n                  </CRow>\n                </CCol>\n              </CRow>\n            </CCol>\n          </CContainer>\n          <div>\n            {Array.isArray(sortedMatchList) && sortedMatchList.length > 0 ? (\n              sortedMatchList.map((match) => {\n                const firstTeam = match.teams[0]\n                const teamWinner = firstTeam.win === true ? firstTeam.teamId : match.teams[1].teamId\n                const fullName = name.split('#')\n                console.log(fullName)\n                const riotidName = fullName[0]\n                const riotIdTagline = fullName[1]\n                // Calculate the value of summonerWon based on the comparison\n                const summonerWon =\n                  match.participants.find(\n                    (participant) =>\n                      participant.riotIdName + '#' + participant.riotIdTagline === name,\n                  )?.team === teamWinner\n                console.log(match)\n                return (\n                  // Add the return statement here\n                  <CListGroup key={match.id}>\n                    <Match\n                      match={match}\n                      riotIdName={riotidName}\n                      riotIdTagline={riotIdTagline}\n                      summonerWon={summonerWon}\n                    />\n                  </CListGroup>\n                )\n              })\n            ) : (\n              <p>No Ranked games found, try updating</p>\n            )}\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <p>Summoner Not Found</p>\n        </div>\n      )\n    }\n  }\n}\n\nexport default Summoner\n","export var cilLockLocked = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M384,200V144a128,128,0,0,0-256,0v56H88V328c0,92.635,75.364,168,168,168s168-75.365,168-168V200ZM160,144a96,96,0,0,1,192,0v56H160ZM392,328c0,74.99-61.01,136-136,136s-136-61.01-136-136V232H392Z' class='ci-primary'/>\"];\n","/**\n * --------------------------------------------------------------------------\n * CoreUI Utils (__COREUI_VERSION__): getStyle.ts\n * Licensed under MIT (https://github.com/coreui/coreui-utils/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst getStyle = (property: string, element?: Element) => {\n  if (typeof window === 'undefined') {\n    return\n  }\n\n  if (typeof document === 'undefined') {\n    return\n  }\n\n  const _element = element ?? document.body\n\n  return window.getComputedStyle(_element, null).getPropertyValue(property).replace(/^\\s/, '')\n}\n\nexport default getStyle\n"],"names":["props","formattedKda","toFormat","desiredLength","amountToFill","length","halfFormatted","padStart","padEnd","console","log","fillStringWithSpaces","participant","deaths","kills","assists","toFixed","summonerNameFromMatchDetail","_jsxs","CRow","className","children","_jsx","TeamParticipants","singleMatch","CCol","sm","Link","to","championName","state","itemName","championId","style","height","width","src","alt","gameId","index","match","number","summonerSpell1","summonerSpell2","ParticipantKda","_Fragment","padding","riotIdName","riotIdTagline","_ref","item","color","CListGroupItem","CIcon","size","icon","cilLockLocked","getCListGroup","CListGroup","layout","ParticipantItem","item0","item1","item2","item6","item3","item4","item5","matchDetail","participants","imageSize","navigate","useNavigate","fetchSummoner","selectedParticipant","summonerName","encodedSummoner","encodeURIComponent","fetch","then","response","json","data","summoner","error","catch","map","cursor","whiteSpace","onClick","summonerWon","gameDuration","gameEndTimestamp","queue","teams","team1Participants","filter","team","teamId","sort","a","b","participantId","team2Participants","getTimeElapsed","timeDifference","Date","now","hoursElapsed","Math","floor","daysElapsed","CContainer","replace","durationInSeconds","MatchSummonerBuild","ParticipantItems","Summoner","matchList","setMatchList","useState","location","useLocation","window","name","platform","encodedName","handleFetchMatchList","ok","Error","reload","useEffect","sortedMatchList","wins","loses","reduce","accumulator","_match$participants$f","firstTeam","win","find","doughnutTextPlugin","id","beforeDraw","chart","chartArea","ctx","restore","fontSize","font","textBaseline","text","textX","measureText","textY","legend","titleBlock","fillText","save","fluid","profileIconId","summonerLevel","CButton","CChart","type","labels","datasets","backgroundColor","options","responsive","maintainAspectRatio","plugins","getStyle","Array","isArray","_match$participants$f2","teamWinner","fullName","split","riotidName","Match","property","element","document","_element","body","getComputedStyle","getPropertyValue"],"sourceRoot":""}